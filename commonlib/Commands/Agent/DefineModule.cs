/****************************************************************************************
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChainsAPM.Commands.Agent
{
    public class DefineModule : Interfaces.ICommand<byte>
    {

         private Helpers.Fnv1a64 hashhelper;

         public DateTime TimeStamp { get; set; }

        public System.Int64 ModuleID { get; set; }
        public System.String ModuleName { get; set; }

        public DefineModule()
        {
            hashhelper = new Helpers.Fnv1a64();
        }

        public DefineModule(System.Int64 timestamp, System.Int64 _moduleid, System.String _modulename) : this()
        {
            TimeStamp = timestamp == 0 ? DateTime.Now : DateTime.FromFileTimeUtc(timestamp);
            ModuleID = _moduleid;
            ModuleName = _modulename;
        }

        public string Name
        {
            get { return "Define Module"; }
        }
        public ushort Code
        {
            get { return 0x0004; }
        }
        public string Description
        {
            get { return "Define a module after it has been loaded. This is required to properly map a mdToken to it's name."; }
        }
        public Type CommandType
        {
            get { return typeof(System.String); }
        }
        public Interfaces.ICommand<byte> Decode(ArraySegment<byte> input)
        {

            if (input.Count != 0)
            {
                Helpers.ArraySegmentStream segstream = new Helpers.ArraySegmentStream(input);
                int size = segstream.GetInt32();
                if (input.Count == size)
                {
                    short code = segstream.GetInt16();
                    if (code == Code)
                    {
                    var timestamp = segstream.GetInt64();
                    var decodeModuleID = segstream.GetInt64();

     
                    var stringlenModuleName = segstream.GetInt32();
                    var decodeModuleNameHash = segstream.GetInt64();
                    var decodeModuleName = segstream.GetUnicode(stringlenModuleName + 1);

     
                       
                    var term = segstream.GetInt16();

                    if (term != 0)
                    {
                        throw new System.Runtime.Serialization.SerializationException("Terminator is a non zero value. Please check the incoming byte stream for possible errors.");
                    }
                    return new DefineModule(timestamp, decodeModuleID, decodeModuleName);
                    }
                    else
                    {
                        throw new System.Runtime.Serialization.SerializationException("Invalid command code detected. Please check the incoming byte stream for possible errors.");
                    }
                }
                else
                {
                    throw new System.Runtime.Serialization.SerializationException("Size of message does not match size of byte stream. Please check the incoming byte stream for possible errors.");
                }
            }
            else
            {
                throw new System.Runtime.Serialization.SerializationException("Size of message is zero. Please check the incoming byte stream for possible errors. ");
            }
        }
        public byte[] Encode()
        {
            int byteSize = 0;

             byteSize += sizeof (Int32); // Length Of Command
             byteSize += sizeof (Int16); // Length Of Code
             byteSize += sizeof (Int64); // Length Of Timestamp

            
            byteSize += sizeof(System.Int64);
            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += ModuleName.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
            byteSize += sizeof (short); // Length Of Terminator
            var buffer = new List<byte>(byteSize);
            buffer.AddRange(BitConverter.GetBytes(byteSize)); // 4 bytes for size, 2 byte for code, 8 bytes for data, 8 bytes for data, 8 bytes for TS, 2 bytes for term
            buffer.AddRange(BitConverter.GetBytes(Code));
            buffer.AddRange(BitConverter.GetBytes(TimeStamp.ToFileTimeUtc()));
            buffer.AddRange(BitConverter.GetBytes(ModuleID)); 

            var sBufferModuleName = System.Text.UnicodeEncoding.Unicode.GetBytes(ModuleName);
            buffer.AddRange(BitConverter.GetBytes(ModuleName.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferModuleName));
            buffer.AddRange(sBufferModuleName);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            buffer.AddRange(BitConverter.GetBytes((short)0));
            return buffer.ToArray();
        }
    }
    
}

