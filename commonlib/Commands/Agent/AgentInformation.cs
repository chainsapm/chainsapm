/****************************************************************************************
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChainsAPM.Commands.Agent
{
    public class AgentInformation : Interfaces.ICommand<byte>
    {

         private Helpers.Fnv1a64 hashhelper;

         public DateTime TimeStamp { get; set; }

        public System.String AgentName { get; set; }
        public System.String MachineName { get; set; }
        public System.String WorkingDirectory { get; set; }
        public System.String CommandLine { get; set; }
        public System.String ProcessName { get; set; }
        public System.Int16 ProcessPID { get; set; }
        public System.String NETVersion { get; set; }

        public AgentInformation()
        {
            hashhelper = new Helpers.Fnv1a64();
        }

        public AgentInformation(System.Int64 timestamp, System.String _agentname, System.String _machinename, System.String _workingdirectory, System.String _commandline, System.String _processname, System.Int16 _processpid, System.String _netversion) : this()
        {
            TimeStamp = timestamp == 0 ? DateTime.Now : DateTime.FromFileTimeUtc(timestamp);
            AgentName = _agentname;
            MachineName = _machinename;
            WorkingDirectory = _workingdirectory;
            CommandLine = _commandline;
            ProcessName = _processname;
            ProcessPID = _processpid;
            NETVersion = _netversion;
        }

        public string Name
        {
            get { return "Agent Information"; }
        }
        public ushort Code
        {
            get { return 0x0001; }
        }
        public string Description
        {
            get { return "Supplies the server with all of the information needed to identify an agent."; }
        }
        public Type CommandType
        {
            get { return typeof(System.String); }
        }
        public Interfaces.ICommand<byte> Decode(ArraySegment<byte> input)
        {

            if (input.Count != 0)
            {
                Helpers.ArraySegmentStream segstream = new Helpers.ArraySegmentStream(input);
                int size = segstream.GetInt32();
                if (input.Count == size)
                {
                    short code = segstream.GetInt16();
                    if (code == Code)
                    {
                    var timestamp = segstream.GetInt64();
                    var stringlenAgentName = segstream.GetInt32();
                    var decodeAgentNameHash = segstream.GetInt64();
                    var decodeAgentName = segstream.GetUnicode(stringlenAgentName + 1);

     
                    var stringlenMachineName = segstream.GetInt32();
                    var decodeMachineNameHash = segstream.GetInt64();
                    var decodeMachineName = segstream.GetUnicode(stringlenMachineName + 1);

     
                    var stringlenWorkingDirectory = segstream.GetInt32();
                    var decodeWorkingDirectoryHash = segstream.GetInt64();
                    var decodeWorkingDirectory = segstream.GetUnicode(stringlenWorkingDirectory + 1);

     
                    var stringlenCommandLine = segstream.GetInt32();
                    var decodeCommandLineHash = segstream.GetInt64();
                    var decodeCommandLine = segstream.GetUnicode(stringlenCommandLine + 1);

     
                    var stringlenProcessName = segstream.GetInt32();
                    var decodeProcessNameHash = segstream.GetInt64();
                    var decodeProcessName = segstream.GetUnicode(stringlenProcessName + 1);

     
                    var decodeProcessPID = segstream.GetInt16();

     
                    var stringlenNETVersion = segstream.GetInt32();
                    var decodeNETVersionHash = segstream.GetInt64();
                    var decodeNETVersion = segstream.GetUnicode(stringlenNETVersion + 1);

     
                       
                    var term = segstream.GetInt16();

                    if (term != 0)
                    {
                        throw new System.Runtime.Serialization.SerializationException("Terminator is a non zero value. Please check the incoming byte stream for possible errors.");
                    }
                    return new AgentInformation(timestamp, decodeAgentName, decodeMachineName, decodeWorkingDirectory, decodeCommandLine, decodeProcessName, decodeProcessPID, decodeNETVersion);
                    }
                    else
                    {
                        throw new System.Runtime.Serialization.SerializationException("Invalid command code detected. Please check the incoming byte stream for possible errors.");
                    }
                }
                else
                {
                    throw new System.Runtime.Serialization.SerializationException("Size of message does not match size of byte stream. Please check the incoming byte stream for possible errors.");
                }
            }
            else
            {
                throw new System.Runtime.Serialization.SerializationException("Size of message is zero. Please check the incoming byte stream for possible errors. ");
            }
        }
        public byte[] Encode()
        {
            int byteSize = 0;

             byteSize += sizeof (Int32); // Length Of Command
             byteSize += sizeof (Int16); // Length Of Code
             byteSize += sizeof (Int64); // Length Of Timestamp

            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += AgentName.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += MachineName.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += WorkingDirectory.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += CommandLine.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += ProcessName.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
	        
            byteSize += sizeof(System.Int16);
            byteSize += sizeof(System.Int32); // Length Bytes
            byteSize += sizeof(System.Int64); // Hash Bytes
            byteSize += NETVersion.Length; // StringLength Bytes
            byteSize += sizeof(System.Int16); // Zero Terminated String
            byteSize += sizeof (short); // Length Of Terminator
            var buffer = new List<byte>(byteSize);
            buffer.AddRange(BitConverter.GetBytes(byteSize)); // 4 bytes for size, 2 byte for code, 8 bytes for data, 8 bytes for data, 8 bytes for TS, 2 bytes for term
            buffer.AddRange(BitConverter.GetBytes(Code));
            buffer.AddRange(BitConverter.GetBytes(TimeStamp.ToFileTimeUtc()));
            var sBufferAgentName = System.Text.UnicodeEncoding.Unicode.GetBytes(AgentName);
            buffer.AddRange(BitConverter.GetBytes(AgentName.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferAgentName));
            buffer.AddRange(sBufferAgentName);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            var sBufferMachineName = System.Text.UnicodeEncoding.Unicode.GetBytes(MachineName);
            buffer.AddRange(BitConverter.GetBytes(MachineName.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferMachineName));
            buffer.AddRange(sBufferMachineName);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            var sBufferWorkingDirectory = System.Text.UnicodeEncoding.Unicode.GetBytes(WorkingDirectory);
            buffer.AddRange(BitConverter.GetBytes(WorkingDirectory.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferWorkingDirectory));
            buffer.AddRange(sBufferWorkingDirectory);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            var sBufferCommandLine = System.Text.UnicodeEncoding.Unicode.GetBytes(CommandLine);
            buffer.AddRange(BitConverter.GetBytes(CommandLine.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferCommandLine));
            buffer.AddRange(sBufferCommandLine);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            var sBufferProcessName = System.Text.UnicodeEncoding.Unicode.GetBytes(ProcessName);
            buffer.AddRange(BitConverter.GetBytes(ProcessName.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferProcessName));
            buffer.AddRange(sBufferProcessName);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            buffer.AddRange(BitConverter.GetBytes(ProcessPID)); 

            var sBufferNETVersion = System.Text.UnicodeEncoding.Unicode.GetBytes(NETVersion);
            buffer.AddRange(BitConverter.GetBytes(NETVersion.Length + 1));
            buffer.AddRange(hashhelper.ComputeHash(sBufferNETVersion));
            buffer.AddRange(sBufferNETVersion);
            buffer.AddRange(BitConverter.GetBytes((short)0));

            buffer.AddRange(BitConverter.GetBytes((short)0));
            return buffer.ToArray();
        }
    }
    
}

