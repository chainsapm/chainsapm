// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CommandCreator
{
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class SnippetIncludes : SnippetIncludesBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(" \r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 3 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

protected string TypeMapper(string typeName, Dictionary<string, string> TypeMapping) {

	if (TypeMapping.ContainsKey(typeName)) 
		return TypeMapping[typeName].ToString(); 

	return typeName; 
}

private void CreateStringListing(string varName, bool isForLoop, bool isForLength) 
{
	var szt = isForLoop ? string.Empty : "size_t ";
	varName = isForLoop ? varName + "item" : varName;
	var varData = isForLength ? "len" : "data";
	if (isForLoop)
		WriteLine("{0}strlen_{1}{2} = item.length();", szt, varName, varData);
	else
		WriteLine("{0}strlen_{1}{2} = {1}.length();", szt, varName, varData);
	WriteLine("{0}strbytes_{1}{2} = (strlen_{1}{2} * sizeof(wchar_t)) + sizeof(wchar_t);", szt, varName, varData);

        
        #line default
        #line hidden
        
        #line 22 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("size += sizeof(__int32); // String Length \r\nsize += sizeof(__int64); // String Ha" +
        "sh\r\nsize += strbytes_");

        
        #line default
        #line hidden
        
        #line 25 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName + varData));

        
        #line default
        #line hidden
        
        #line 25 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("; // String Bytes\r\n");

        
        #line default
        #line hidden
        
        #line 26 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}

protected void CreateCppLength(ClassProperty cpItem, Dictionary<string, string> TypeMapping)
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	
	if (typeName.ToLower() == "std::wstring")
	{ 	
		CreateStringListing(cpItem.Name, false, true);
		WriteLine("");
	} else { 

        
        #line default
        #line hidden
        
        #line 38 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("size += sizeof(");

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("); // Size of ");

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

	}
}

protected void CreateForLoopForString(string varName, bool isForLength) {
	string varNameItm = varName + "item";
	varNameItm = isForLength ? varNameItm + "len" : varNameItm + "data";

        
        #line default
        #line hidden
        
        #line 48 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("\r\nsize_t strlen_");

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varNameItm));

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = 0;\r\nsize_t strbytes_");

        
        #line default
        #line hidden
        
        #line 51 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varNameItm));

        
        #line default
        #line hidden
        
        #line 51 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = 0;\r\nfor (auto item : ");

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 52 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(") {\r\n");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}


protected void CreateForLoopForTypeData(string varName) {

        
        #line default
        #line hidden
        
        #line 58 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("\r\nfor (auto item : ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(") {\r\n");

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}

protected void CreateCppLengthListOrArray(ClassProperty cpItem, Dictionary<string, string> TypeMapping) 
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);

	if (typeName.ToLower() == "std::wstring")
	{ 	
		CreateForLoopForString(cpItem.Name, true);
		PushIndent("    "); 
		CreateStringListing(cpItem.Name, true, true);
		PopIndent(); 
		WriteLine("}"); // Terminating brace for for loop
		WriteLine(""); // Extra space for clarity
	} else { 

        
        #line default
        #line hidden
        
        #line 77 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("size += sizeof(");

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(") * ");

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(".size(); // Size of ");

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(cpItem.Name));

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" vector\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 80 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

	}
}

protected void CreateCppStringData(string varName, bool isForLoop, bool isForLength)
{
	var szt = isForLoop ? string.Empty : "size_t ";
	varName = isForLoop ? varName + "item" : varName;
	var varData = isForLength ? "len" : "data";
	if (isForLoop)
		WriteLine("{0}strlen_{1}{2} = item.length();", szt, varName, varData);
	else
		WriteLine("{0}strlen_{1}{2} = {1}.length();", szt, varName, varData);
	WriteLine("{0}strbytes_{1}{2} = (strlen_{1}{2} * sizeof(wchar_t)) + sizeof(wchar_t);", szt, varName, varData);

	if (isForLoop)
		WriteLine("hashout = hash(item);");
	else
		WriteLine("hashout = hash({0});", varName);

        
        #line default
        #line hidden
        
        #line 99 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" \r\n\r\nmemcpy(v2, &strlen_");

        
        #line default
        #line hidden
        
        #line 101 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName + varData));

        
        #line default
        #line hidden
        
        #line 101 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(", sizeof(__int32));\r\nv2 += sizeof(__int32);\r\nmemcpy(v2, &hashout, sizeof(size_t))" +
        ";\r\nv2 += sizeof(__int64);\r\n");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

if (isForLoop)
		WriteLine("memcpy(v2, item.data(), strbytes_{0}{1});", varName, varData);
	else
		WriteLine("memcpy(v2, {0}.data(), strbytes_{0}{1});", varName, varData);

        
        #line default
        #line hidden
        
        #line 110 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("v2 += strbytes_");

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName + varData));

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 112 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}





protected void CreateCppTypeData(string typeName, string varName, bool isForLoop) {
if (isForLoop)
	{ 
        
        #line default
        #line hidden
        
        #line 121 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" \r\nmemcpy(v2, &");

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(", sizeof(");

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(")); ");

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

	} else {

        
        #line default
        #line hidden
        
        #line 124 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("memcpy(v2, &");

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(", sizeof(");

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(")); ");

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

	}

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" \r\nv2 += sizeof(");

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("); ");

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}

protected void CreateCppDataInsert(ClassProperty cpItem, Dictionary<string, string> TypeMapping) {

	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (typeName.ToLower() == "std::wstring") {
		CreateCppStringData(cpItem.Name, false, false);
	} else { 
		CreateCppTypeData(typeName, cpItem.Name, false);
	} 
}

protected void ExtractCppDataForList(ClassProperty cpItem, Dictionary<string, string> TypeMapping) {

	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	ExtractForLoop(cpItem.Name, typeName);
	PushIndent("    "); 
	if (typeName.ToLower() == "std::wstring") {
		ExtractCppStringData(cpItem.Name, true, false);
	} else { 
		
		ExtractCppTypeData(typeName, cpItem.Name, true);
	} 
	PopIndent(); 
	WriteLine("}"); // Terminating brace for for loop
	WriteLine(""); // Extra space for clarity
}


protected void ExtractCppData(ClassProperty cpItem, Dictionary<string, string> TypeMapping) {

	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (typeName.ToLower() == "std::wstring") {
		ExtractCppStringData(cpItem.Name, false, false);
	} else { 
		ExtractCppTypeData(typeName, cpItem.Name, false); 
	} 
}

protected void ExtractCppStringData(string varName, bool isForLoop, bool isForLength) {  

        
        #line default
        #line hidden
        
        #line 169 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("\r\nauto strlen");

        
        #line default
        #line hidden
        
        #line 171 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 171 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = *(__int32*)ptr;\r\nptr += sizeof(__int32);\r\n\r\nauto hash");

        
        #line default
        #line hidden
        
        #line 174 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 174 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = *(__int64*)ptr;\r\nptr += sizeof(__int64);\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 177 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

if (isForLoop) {

        
        #line default
        #line hidden
        
        #line 179 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("auto str = (wchar_t*)ptr;\r\nlocal_");

        
        #line default
        #line hidden
        
        #line 181 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 181 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(".emplace_back(str);\r\nptr += strlen");

        
        #line default
        #line hidden
        
        #line 182 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 182 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" * 2;\r\n");

        
        #line default
        #line hidden
        
        #line 183 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

} else {

        
        #line default
        #line hidden
        
        #line 185 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("auto local_");

        
        #line default
        #line hidden
        
        #line 186 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 186 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = (wchar_t*)ptr;\r\nptr += strlen");

        
        #line default
        #line hidden
        
        #line 187 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 187 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" * 2;\r\n");

        
        #line default
        #line hidden
        
        #line 188 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}
}

protected void ExtractForLoop(string varName, string typeName) {

        
        #line default
        #line hidden
        
        #line 193 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("\r\nsize_t ");

        
        #line default
        #line hidden
        
        #line 195 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 195 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("_count = *(__int32*)ptr;\r\nptr += sizeof(__int32);\r\n\r\nauto local_");

        
        #line default
        #line hidden
        
        #line 198 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 198 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = std::vector<");

        
        #line default
        #line hidden
        
        #line 198 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 198 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(">();\r\n\r\nfor (size_t i");

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = 0; i");

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" < ");

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("_count; i");

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 200 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("++) {\r\n");

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}


protected void ExtractCppTypeData(string typeName, string varName, bool isForLoop) {
if (isForLoop) {

        
        #line default
        #line hidden
        
        #line 207 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("auto value = *(");

        
        #line default
        #line hidden
        
        #line 208 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 208 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("*)ptr;\r\n");

        
        #line default
        #line hidden
        
        #line 209 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

} else {

        
        #line default
        #line hidden
        
        #line 211 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("auto local_");

        
        #line default
        #line hidden
        
        #line 212 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 212 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(" = *(");

        
        #line default
        #line hidden
        
        #line 212 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 212 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("*)ptr;  \r\n");

        
        #line default
        #line hidden
        
        #line 213 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}

        
        #line default
        #line hidden
        
        #line 215 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("ptr += sizeof(");

        
        #line default
        #line hidden
        
        #line 216 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeName));

        
        #line default
        #line hidden
        
        #line 216 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("); \r\n");

        
        #line default
        #line hidden
        
        #line 217 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

if (isForLoop) {

        
        #line default
        #line hidden
        
        #line 219 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write("local_");

        
        #line default
        #line hidden
        
        #line 220 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(varName));

        
        #line default
        #line hidden
        
        #line 220 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"
this.Write(".emplace_back(value);\r\n");

        
        #line default
        #line hidden
        
        #line 221 "C:\Users\James\Source\Repos\chainsapm\CommandCreator\SnippetIncludes.tt"

}
}

protected void CreateCppDataInsertForList(ClassProperty cpItem, Dictionary<string, string> TypeMapping) {

	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (typeName.ToLower() == "std::wstring") {
		CreateForLoopForString(cpItem.Name, false);
		PushIndent("    "); 
		CreateCppStringData(cpItem.Name, true, false);
	} else { 
		
		CreateForLoopForTypeData(cpItem.Name);
		PushIndent("    "); 
		CreateCppTypeData(typeName, "item", true);
	} 
	PopIndent(); 
	WriteLine("}"); // Terminating brace for for loop
	WriteLine(""); // Extra space for clarity
}

protected void CreateCppSignature(ClassProperty cpItem, Dictionary<string, string> TypeMapping, bool isNotLast) 
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (cpItem.IsList == true | cpItem.IsArray == true) {
		CreateCppVariable(string.Format("std::vector<{0}>", typeName), cpItem.Name.ToLower());
	} else {
		CreateCppVariable(typeName, cpItem.Name.ToLower());
	}
	if (isNotLast)
		Write(", ");
	
}

protected void CreateCppDeclaration(ClassProperty cpItem, Dictionary<string, string> TypeMapping) 
{
	string typeName = TypeMapper(cpItem.TypeName, TypeMapping);
	if (cpItem.IsList == true | cpItem.IsArray == true) {
		CreateCppVariable(string.Format("std::vector<{0}>", typeName), cpItem.Name); 
	} else {
		CreateCppVariable(typeName, cpItem.Name);
	}
	WriteLine(";");
}

protected void CreateCppVariable(string typeName, string varName) 
{
	Write (string.Format("{0} {1}", typeName, varName)); 
}

protected void CreateCppInitializers(ClassProperty cpItem, bool isNotLast) {
	Write("{0}({1})", cpItem.Name, cpItem.Name.ToLower());
	if (isNotLast)
		Write(", ");
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class SnippetIncludesBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
