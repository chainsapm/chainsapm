<#@ template language="C#" #>   
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="SnippetIncludes.tt" #> 
/****************************************************************************************
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
* 
****************************************************************************************/ 
#pragma once
#include "ICommand.h"

namespace Commands  
{
    class <#= this.ClassName #> :
        public virtual ICommand
    {


    public:
    <# foreach (var enumn in this.EnumerationList) { #>
        enum class <#= enumn.EnumerationName #>
        {
<# foreach (var enumItem in enumn.Items) { #>
<# if (enumn.Items.Last().Name != enumItem.Name) { #>
          <#= enumItem.Name #> = 0x<#= enumItem.Value.ToString("x8") #>,
<#
} else { #>
          <#= enumItem.Name #> = 0x<#= enumItem.Value.ToString("x8") #>
<# } #>
<# } #>  
        };
<# } #>

        <#= this.ClassName #>(__int64 timestamp, <# foreach (var cpItem in this.ClassProperties) { CreateCppSignature(cpItem, TypeMapping, this.ClassProperties.Last().Name != cpItem.Name); } #>); 
        ~<#= this.ClassName #>();
        virtual std::shared_ptr<std::vector<char>> Encode();
        virtual std::shared_ptr<ICommand> Decode(std::shared_ptr<std::vector<char>> &data);  
        virtual std::wstring Name();
        virtual std::wstring Description();
        virtual short Code() { return code; }
<# 
PushIndent("        ");
foreach (var cpItem in this.ClassProperties)
{
    CreateCppDeclaration(cpItem, TypeMapping);
} PopIndent(); #>
      private:
        __int64 timestamp; // Always use a 64bit so the message doesn't change
        std::shared_ptr<std::vector<char>> internalvector;
        bool hasEncoded;
        short code;
    };

}
