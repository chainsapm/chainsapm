  
  
 

/**************************************************************************************** 
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
#pragma once
#include "stdafx.h"
#include "commands\AgentInformation.h"
 

namespace Commands
{
	AgentInformation::AgentInformation(__int64 timestamp, std::wstring agentname, std::wstring machinename, std::wstring workingdirectory, std::wstring commandline, std::wstring processname, __int16 processpid, std::wstring netversion)
		: timestamp(timestamp), code(0x0001), hasEncoded(false), AgentName(agentname), MachineName(machinename), WorkingDirectory(workingdirectory), CommandLine(commandline), ProcessName(processname), ProcessPID(processpid), NETVersion(netversion) 
	{
	}

	AgentInformation::~AgentInformation()
	{
	}

	std::wstring AgentInformation::Name()
	{
		return L"Agent Information";
	}

	std::wstring AgentInformation::Description()
	{
		return L"Supplies the server with all of the information needed to identify an agent.";
	}

	std::shared_ptr<std::vector<char>> AgentInformation::Encode()
	{
		if (!hasEncoded)
		{
			// The following items will be resued 
			auto hash = std::hash<std::wstring>();
			size_t hashout = 0;		// Temp var for string hashes
			size_t strlen = 0;		// Temp var for string length
			size_t strbytes = 0;	// Temp var for string bytes

			size_t size = sizeof(__int32)	// len
				+ sizeof(short)				// code
				+ sizeof(__int64);			// timestamp

			// Begin the dynamically generated sizes
			size_t strlen_AgentNamelen = AgentName.length();
			size_t strbytes_AgentNamelen = (strlen_AgentNamelen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_AgentNamelen; // String Bytes

			size_t strlen_MachineNamelen = MachineName.length();
			size_t strbytes_MachineNamelen = (strlen_MachineNamelen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_MachineNamelen; // String Bytes

			size_t strlen_WorkingDirectorylen = WorkingDirectory.length();
			size_t strbytes_WorkingDirectorylen = (strlen_WorkingDirectorylen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_WorkingDirectorylen; // String Bytes

			size_t strlen_CommandLinelen = CommandLine.length();
			size_t strbytes_CommandLinelen = (strlen_CommandLinelen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_CommandLinelen; // String Bytes

			size_t strlen_ProcessNamelen = ProcessName.length();
			size_t strbytes_ProcessNamelen = (strlen_ProcessNamelen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_ProcessNamelen; // String Bytes

			size += sizeof(__int16); // Size of ProcessPID
			
			size_t strlen_NETVersionlen = NETVersion.length();
			size_t strbytes_NETVersionlen = (strlen_NETVersionlen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_NETVersionlen; // String Bytes

			// End the dynamically generated sizes  
			size += sizeof(short);	//Terminator

			auto vector = new char[size]; 
			short term = 0;
			
			// 
			auto v2 = (char*)memcpy(vector, &size, sizeof(__int32));  
			v2 += sizeof(__int32); 
			memcpy(v2, &code, sizeof(short));
			v2 += sizeof(short);
			memcpy(v2, &timestamp, sizeof(__int64));
			v2 += sizeof(__int64);

			// Begin the dynamically generated byte copies    
			size_t strlen_AgentNamedata = AgentName.length();
			size_t strbytes_AgentNamedata = (strlen_AgentNamedata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(AgentName);
			 
			
			memcpy(v2, &strlen_AgentNamedata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, AgentName.data(), strbytes_AgentNamedata);
			v2 += strbytes_AgentNamedata;
			size_t strlen_MachineNamedata = MachineName.length();
			size_t strbytes_MachineNamedata = (strlen_MachineNamedata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(MachineName);
			 
			
			memcpy(v2, &strlen_MachineNamedata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, MachineName.data(), strbytes_MachineNamedata);
			v2 += strbytes_MachineNamedata;
			size_t strlen_WorkingDirectorydata = WorkingDirectory.length();
			size_t strbytes_WorkingDirectorydata = (strlen_WorkingDirectorydata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(WorkingDirectory);
			 
			
			memcpy(v2, &strlen_WorkingDirectorydata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, WorkingDirectory.data(), strbytes_WorkingDirectorydata);
			v2 += strbytes_WorkingDirectorydata;
			size_t strlen_CommandLinedata = CommandLine.length();
			size_t strbytes_CommandLinedata = (strlen_CommandLinedata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(CommandLine);
			 
			
			memcpy(v2, &strlen_CommandLinedata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, CommandLine.data(), strbytes_CommandLinedata);
			v2 += strbytes_CommandLinedata;
			size_t strlen_ProcessNamedata = ProcessName.length();
			size_t strbytes_ProcessNamedata = (strlen_ProcessNamedata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(ProcessName);
			 
			
			memcpy(v2, &strlen_ProcessNamedata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, ProcessName.data(), strbytes_ProcessNamedata);
			v2 += strbytes_ProcessNamedata;
			memcpy(v2, &ProcessPID, sizeof(__int16));  
			v2 += sizeof(__int16); size_t strlen_NETVersiondata = NETVersion.length();
			size_t strbytes_NETVersiondata = (strlen_NETVersiondata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(NETVersion);
			 
			
			memcpy(v2, &strlen_NETVersiondata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, NETVersion.data(), strbytes_NETVersiondata);
			v2 += strbytes_NETVersiondata;
			// End the dynamically generated byte copies

			// Terminator
			memcpy(v2, &term, sizeof(short));
			v2 += sizeof(short);

			hasEncoded = true;

			internalvector = std::make_shared<std::vector<char>>(vector, v2);
		}
		return internalvector;
	}

	std::shared_ptr<ICommand> AgentInformation::Decode(std::shared_ptr<std::vector<char>> &data)      
	{
		auto hash = std::hash<std::wstring>();

		auto ptr = data->data();

		auto len = *(unsigned int*)ptr;  
		ptr += sizeof(unsigned int);

		auto code = *(short*)ptr;
		ptr += sizeof(short);

		auto local_timestamp = *(__int64*)ptr;
		ptr += sizeof(__int64);

		
		auto strlenAgentName = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashAgentName = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_AgentName = (wchar_t*)ptr;
		ptr += strlenAgentName * 2;
		
		auto strlenMachineName = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashMachineName = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_MachineName = (wchar_t*)ptr;
		ptr += strlenMachineName * 2;
		
		auto strlenWorkingDirectory = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashWorkingDirectory = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_WorkingDirectory = (wchar_t*)ptr;
		ptr += strlenWorkingDirectory * 2;
		
		auto strlenCommandLine = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashCommandLine = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_CommandLine = (wchar_t*)ptr;
		ptr += strlenCommandLine * 2;
		
		auto strlenProcessName = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashProcessName = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_ProcessName = (wchar_t*)ptr;
		ptr += strlenProcessName * 2;
		auto local_ProcessPID = *(__int16*)ptr;  
		ptr += sizeof(__int16); 
		
		auto strlenNETVersion = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashNETVersion = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_NETVersion = (wchar_t*)ptr;
		ptr += strlenNETVersion * 2;

		// Terminator
		auto term = *(short*)ptr;
		ptr += sizeof(short);
		return std::make_shared<AgentInformation>(local_timestamp,  local_AgentName ,  local_MachineName ,  local_WorkingDirectory ,  local_CommandLine ,  local_ProcessName ,  local_ProcessPID ,  local_NETVersion );
	}
}

