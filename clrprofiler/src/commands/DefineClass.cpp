  
  
 

/**************************************************************************************** 
*
* This code was generated by the Command Creator tool for the ChainsAPM project. 
* If manual changes are made to the code they could be lost.
*
****************************************************************************************/
#pragma once
#include "stdafx.h"
#include "commands\DefineClass.h"
 

namespace Commands
{
	DefineClass::DefineClass(__int64 timestamp, __int64 classid, std::wstring classname)
		: timestamp(timestamp), code(0x0008), hasEncoded(false), ClassID(classid), ClassName(classname) 
	{
	}

	DefineClass::~DefineClass()
	{
	}

	std::wstring DefineClass::Name()
	{
		return L"DefineClass";
	}

	std::wstring DefineClass::Description()
	{
		return L"Defines the class to be used for the method.";
	}

	std::shared_ptr<std::vector<char>> DefineClass::Encode()
	{
		if (!hasEncoded)
		{
			// The following items will be resued 
			auto hash = std::hash<std::wstring>();
			size_t hashout = 0;		// Temp var for string hashes
			size_t strlen = 0;		// Temp var for string length
			size_t strbytes = 0;	// Temp var for string bytes

			size_t size = sizeof(__int32)	// len
				+ sizeof(short)				// code
				+ sizeof(__int64);			// timestamp

			// Begin the dynamically generated sizes
			size += sizeof(__int64); // Size of ClassID
			
			size_t strlen_ClassNamelen = ClassName.length();
			size_t strbytes_ClassNamelen = (strlen_ClassNamelen * sizeof(wchar_t)) + sizeof(wchar_t);
			size += sizeof(__int32); // String Length 
			size += sizeof(__int64); // String Hash
			size += strbytes_ClassNamelen; // String Bytes

			// End the dynamically generated sizes  
			size += sizeof(short);	//Terminator

			auto vector = new char[size]; 
			short term = 0;
			
			// 
			auto v2 = (char*)memcpy(vector, &size, sizeof(__int32));  
			v2 += sizeof(__int32); 
			memcpy(v2, &code, sizeof(short));
			v2 += sizeof(short);
			memcpy(v2, &timestamp, sizeof(__int64));
			v2 += sizeof(__int64);

			// Begin the dynamically generated byte copies    
			memcpy(v2, &ClassID, sizeof(__int64));  
			v2 += sizeof(__int64); size_t strlen_ClassNamedata = ClassName.length();
			size_t strbytes_ClassNamedata = (strlen_ClassNamedata * sizeof(wchar_t)) + sizeof(wchar_t);
			hashout = hash(ClassName);
			 
			
			memcpy(v2, &strlen_ClassNamedata, sizeof(__int32));
			v2 += sizeof(__int32);
			memcpy(v2, &hashout, sizeof(size_t));
			v2 += sizeof(__int64);
			memcpy(v2, ClassName.data(), strbytes_ClassNamedata);
			v2 += strbytes_ClassNamedata;
			// End the dynamically generated byte copies

			// Terminator
			memcpy(v2, &term, sizeof(short));
			v2 += sizeof(short);

			hasEncoded = true;

			internalvector = std::make_shared<std::vector<char>>(vector, v2);
		}
		return internalvector;
	}

	std::shared_ptr<ICommand> DefineClass::Decode(std::shared_ptr<std::vector<char>> &data)      
	{
		auto hash = std::hash<std::wstring>();

		auto ptr = data->data();

		auto len = *(unsigned int*)ptr;  
		ptr += sizeof(unsigned int);

		auto code = *(short*)ptr;
		ptr += sizeof(short);

		auto local_timestamp = *(__int64*)ptr;
		ptr += sizeof(__int64);

		auto local_ClassID = *(__int64*)ptr;  
		ptr += sizeof(__int64); 
		
		auto strlenClassName = *(__int32*)ptr;
		ptr += sizeof(__int32);
		
		auto hashClassName = *(__int64*)ptr;
		ptr += sizeof(__int64);
		
		auto local_ClassName = (wchar_t*)ptr;
		ptr += strlenClassName * 2;

		// Terminator
		auto term = *(short*)ptr;
		ptr += sizeof(short);
		return std::make_shared<DefineClass>(local_timestamp,  local_ClassID ,  local_ClassName );
	}
}

